{"version":3,"sources":["layouts/PageLayout.js","libs/EquirectangularToCubeGenerator.js","libs/PMREMCubeUVPacker.js","libs/PMREMGenerator.js","components/MainScene.js","containers/Home.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["PageLayout","this","props","children","Component","EquirectangularToCubeGenerator","camera","PerspectiveCamera","scene","Scene","boxMesh","Mesh","BoxBufferGeometry","shaderMaterial","ShaderMaterial","uniforms","value","vertexShader","fragmentShader","blending","NoBlending","type","getShader","material","side","BackSide","add","sourceTexture","options","resolution","views","t","u","params","format","magFilter","minFilter","generateMipmaps","anisotropy","encoding","renderTarget","WebGLRenderTargetCube","prototype","constructor","update","renderer","currentRenderTarget","getRenderTarget","equirectangularMap","i","v","position","set","up","lookAt","setRenderTarget","clear","render","texture","dispose","PMREMCubeUVPacker","OrthographicCamera","shader","Vector3","cubeTextureLods","cubeLods","size","width","RGBEEncoding","RGBM16Encoding","LinearFilter","CubeUVRenderTarget","WebGLRenderTarget","name","mapping","CubeUVReflectionMapping","objects","geometry","PlaneBufferGeometry","faceOffsets","push","Vector2","textureResolution","offset2","c","numLods","Math","log","offset1","nMips","mipOffsetX","mipOffsetY","mipSize","j","k","clone","envMap","planeMesh","x","y","scale","setScalar","left","right","top","bottom","near","far","updateProjectionMatrix","length","gammaInput","gammaOutput","toneMapping","toneMappingExposure","LinearToneMapping","remove","l","PMREMGenerator","defines","DoubleSide","samplesPerLevel","undefined","monotonicEncoding","LinearEncoding","GammaEncoding","sRGBEncoding","NearestFilter","max","tFlip","isCubeTexture","needsUpdate","r","renderToCubeMapTarget","renderToCubeMapTargetFace","faceIndex","MainScene","prop","updatePostprocessing","composer","height","loadEnvMap","bind","loadModel","className","ref","el","mainScene","clientWidth","clientHeight","timer","clock","THREE","loadingManager","onStart","url","itemsLoaded","itemsTotal","document","getElementById","style","display","onLoad","console","onProgress","onError","textureLoader","cubeTextureLoader","gltfLoader","GLTFLoader","rgbeLoader","RGBELoader","background","antialias","alpha","setSize","setPixelRatio","window","devicePixelRatio","autoClear","gammaFactor","shadowMap","enabled","appendChild","domElement","cameraCtrl","OrbitControls","enableDamping","screenSpacePanning","dampingFactor","minDistance","maxDistance","rotateSpeed","panSpeed","target","resizeObserver","ResizeObserver","entries","contentRect","aspect","observe","rootObj","envLight","dirLight","castShadow","shadow","mapSize","dirLight1","setDataType","setPath","load","cubeGenerator","pmremGenerator","pmremCubeUVPacker","startScene","loadGLTF","initPostprocessing","animate","model","gun","self","traverse","child","isMesh","envMapIntensity","fitCameraToObject","object","offset","boundingBox","setFromObject","center","getCenter","getSize","maxDim","z","cameraZ","fov","PI","abs","minZ","min","cameraToFarEdge","saveState","POSTPROCESSING","renderPass","addPass","vignetteEffect","eskil","darkness","brightnessContrastEffect","contrast","brightness","gammaCorrectionEffect","gamma","areaImage","Image","src","areaImageDataURL","searchImage","searchImageDataURL","smaaEffect","bloomEffect","intensity","luminanceThreshold","luminanceSmoothing","resolutionScale","hueSaturationEffect","hue","saturation","effectPass","renderToScreen","requestAnimationFrame","getDelta","prevProps","prevState","snapshot","disconnect","React","Home","Main","basename","exact","path","component","App","Boolean","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4bdab88b.chunk.js","sourcesContent":["import React, {Component, Fragment} from 'react';\n\nclass PageLayout extends Component {\n  render() {\n    return (\n      <Fragment>\n        <main>\n          {this.props.children}\n        </main>\n      </Fragment>\n    );\n  }\n}\n\nexport default PageLayout;","/**\n* @author Richard M. / https://github.com/richardmonette\n* @author WestLangley / http://github.com/WestLangley\n*/\n\nimport {\n\tBackSide,\n\tBoxBufferGeometry,\n\tCubeCamera,\n\tMesh,\n\tNoBlending,\n\tPerspectiveCamera,\n\tScene,\n\tShaderMaterial,\n\tUniformsUtils,\n\tWebGLRenderTargetCube\n} from \"three\";\n\nvar CubemapGenerator = function ( renderer ) {\n\n\tthis.renderer = renderer;\n\n};\n\nCubemapGenerator.prototype.fromEquirectangular = function ( texture, options ) {\n\n\toptions = options || {};\n\n\tvar scene = new Scene();\n\n\tvar shader = {\n\n\t\tuniforms: {\n\t\t\ttEquirect: { value: null },\n\t\t},\n\n\t\tvertexShader:\n\n\t\t\t`\n\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t//include <common>\n\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t#include <begin_vertex>\n\t\t\t\t#include <project_vertex>\n\n\t\t\t}\n\t\t\t`,\n\n\t\tfragmentShader:\n\n\t\t\t`\n\t\t\tuniform sampler2D tEquirect;\n\n\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t//include <common>\n\t\t\t#define RECIPROCAL_PI 0.31830988618\n\t\t\t#define RECIPROCAL_PI2 0.15915494\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\tvec2 sampleUV;\n\n\t\t\t\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\n\t\t\t\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\n\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t}\n\t\t\t`\n\t};\n\n\tvar material = new ShaderMaterial( {\n\n\t\ttype: 'CubemapFromEquirect',\n\n\t\tuniforms: UniformsUtils.clone( shader.uniforms ),\n\t\tvertexShader: shader.vertexShader,\n\t\tfragmentShader: shader.fragmentShader,\n\t\tside: BackSide,\n\t\tblending: NoBlending\n\n\t} );\n\n\tmaterial.uniforms.tEquirect.value = texture;\n\n\tvar mesh = new Mesh( new BoxBufferGeometry( 5, 5, 5 ), material );\n\n\tscene.add( mesh );\n\n\tvar resolution = options.resolution || 512;\n\n\tvar params = {\n\t\ttype: texture.type,\n\t\tformat: texture.format,\n\t\tencoding: texture.encoding,\n\t\tgenerateMipmaps: ( options.generateMipmaps !== undefined ) ? options.generateMipmaps : texture.generateMipmaps,\n\t\tminFilter: ( options.minFilter !== undefined ) ? options.minFilter : texture.minFilter,\n\t\tmagFilter: ( options.magFilter !== undefined ) ? options.magFilter : texture.magFilter\n\t};\n\n\tvar camera = new CubeCamera( 1, 10, resolution, params );\n\n\tcamera.update( this.renderer, scene );\n\n\tmesh.geometry.dispose();\n\tmesh.material.dispose();\n\n\treturn camera.renderTarget;\n\n};\n\n//\n\nvar EquirectangularToCubeGenerator = ( function () {\n\n\tvar camera = new PerspectiveCamera( 90, 1, 0.1, 10 );\n\tvar scene = new Scene();\n\tvar boxMesh = new Mesh( new BoxBufferGeometry( 1, 1, 1 ), getShader() );\n\tboxMesh.material.side = BackSide;\n\tscene.add( boxMesh );\n\n\tvar EquirectangularToCubeGenerator = function ( sourceTexture, options ) {\n\n\t\toptions = options || {};\n\n\t\tthis.sourceTexture = sourceTexture;\n\t\tthis.resolution = options.resolution || 512;\n\n\t\tthis.views = [\n\t\t\t{ t: [ 1, 0, 0 ], u: [ 0, - 1, 0 ] },\n\t\t\t{ t: [ - 1, 0, 0 ], u: [ 0, - 1, 0 ] },\n\t\t\t{ t: [ 0, 1, 0 ], u: [ 0, 0, 1 ] },\n\t\t\t{ t: [ 0, - 1, 0 ], u: [ 0, 0, - 1 ] },\n\t\t\t{ t: [ 0, 0, 1 ], u: [ 0, - 1, 0 ] },\n\t\t\t{ t: [ 0, 0, - 1 ], u: [ 0, - 1, 0 ] },\n\t\t];\n\n\t\tvar params = {\n\t\t\tformat: options.format || this.sourceTexture.format,\n\t\t\tmagFilter: this.sourceTexture.magFilter,\n\t\t\tminFilter: this.sourceTexture.minFilter,\n\t\t\ttype: options.type || this.sourceTexture.type,\n\t\t\tgenerateMipmaps: this.sourceTexture.generateMipmaps,\n\t\t\tanisotropy: this.sourceTexture.anisotropy,\n\t\t\tencoding: this.sourceTexture.encoding\n\t\t};\n\n\t\tthis.renderTarget = new WebGLRenderTargetCube( this.resolution, this.resolution, params );\n\n\t};\n\n\tEquirectangularToCubeGenerator.prototype = {\n\n\t\tconstructor: EquirectangularToCubeGenerator,\n\n\t\tupdate: function ( renderer ) {\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tboxMesh.material.uniforms.equirectangularMap.value = this.sourceTexture;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar v = this.views[ i ];\n\n\t\t\t\tcamera.position.set( 0, 0, 0 );\n\t\t\t\tcamera.up.set( v.u[ 0 ], v.u[ 1 ], v.u[ 2 ] );\n\t\t\t\tcamera.lookAt( v.t[ 0 ], v.t[ 1 ], v.t[ 2 ] );\n\n\t\t\t\trenderer.setRenderTarget( this.renderTarget, i );\n\t\t\t\trenderer.clear();\n\t\t\t\trenderer.render( scene, camera );\n\n\t\t\t}\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t\treturn this.renderTarget.texture;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.renderTarget.dispose();\n\n\t\t}\n\n\t};\n\n\tfunction getShader() {\n\n\t\tvar shaderMaterial = new ShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t\"equirectangularMap\": { value: null },\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t\"varying vec3 localPosition;\\n\\\n\t\t\t\t\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tlocalPosition = position;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}\",\n\n\t\t\tfragmentShader:\n\t\t\t\t\"#include <common>\\n\\\n\t\t\t\tvarying vec3 localPosition;\\n\\\n\t\t\t\tuniform sampler2D equirectangularMap;\\n\\\n\t\t\t\t\\n\\\n\t\t\t\tvec2 EquirectangularSampleUV(vec3 v) {\\n\\\n\t\t\t\t\tvec2 uv = vec2(atan(v.z, v.x), asin(v.y));\\n\\\n\t\t\t\t\tuv *= vec2(0.1591, 0.3183); // inverse atan\\n\\\n\t\t\t\t\tuv += 0.5;\\n\\\n\t\t\t\t\treturn uv;\\n\\\n\t\t\t\t}\\n\\\n\t\t\t\t\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvec2 uv = EquirectangularSampleUV(normalize(localPosition));\\n\\\n\t\t\t\t\tgl_FragColor = texture2D(equirectangularMap, uv);\\n\\\n\t\t\t\t}\",\n\n\t\t\tblending: NoBlending\n\n\t\t} );\n\n\t\tshaderMaterial.type = 'EquirectangularToCubeGenerator';\n\n\t\treturn shaderMaterial;\n\n\t}\n\n\treturn EquirectangularToCubeGenerator;\n\n} )();\n\nexport { CubemapGenerator, EquirectangularToCubeGenerator };\n","/**\n * @author Prashant Sharma / spidersharma03\n * @author Ben Houston / bhouston, https://clara.io\n *\n * This class takes the cube lods(corresponding to different roughness values), and creates a single cubeUV\n * Texture. The format for a given roughness set of faces is simply::\n * +X+Y+Z\n * -X-Y-Z\n * For every roughness a mip map chain is also saved, which is essential to remove the texture artifacts due to\n * minification.\n * Right now for every face a PlaneMesh is drawn, which leads to a lot of geometry draw calls, but can be replaced\n * later by drawing a single buffer and by sending the appropriate faceIndex via vertex attributes.\n * The arrangement of the faces is fixed, as assuming this arrangement, the sampling function has been written.\n */\n\nimport {\n\tBackSide,\n\tCubeUVReflectionMapping,\n\tLinearFilter,\n\tLinearToneMapping,\n\tMesh,\n\tNoBlending,\n\tOrthographicCamera,\n\tPlaneBufferGeometry,\n\tRGBEEncoding,\n\tRGBM16Encoding,\n\tScene,\n\tShaderMaterial,\n\tVector2,\n\tVector3,\n\tWebGLRenderTarget\n} from \"three\";\n\nvar PMREMCubeUVPacker = ( function () {\n\n\tvar camera = new OrthographicCamera();\n\tvar scene = new Scene();\n\tvar shader = getShader();\n\n\tvar PMREMCubeUVPacker = function ( cubeTextureLods ) {\n\n\t\tthis.cubeLods = cubeTextureLods;\n\t\tvar size = cubeTextureLods[ 0 ].width * 4;\n\n\t\tvar sourceTexture = cubeTextureLods[ 0 ].texture;\n\t\tvar params = {\n\t\t\tformat: sourceTexture.format,\n\t\t\tmagFilter: sourceTexture.magFilter,\n\t\t\tminFilter: sourceTexture.minFilter,\n\t\t\ttype: sourceTexture.type,\n\t\t\tgenerateMipmaps: sourceTexture.generateMipmaps,\n\t\t\tanisotropy: sourceTexture.anisotropy,\n\t\t\tencoding: ( sourceTexture.encoding === RGBEEncoding ) ? RGBM16Encoding : sourceTexture.encoding\n\t\t};\n\n\t\tif ( params.encoding === RGBM16Encoding ) {\n\n\t\t\tparams.magFilter = LinearFilter;\n\t\t\tparams.minFilter = LinearFilter;\n\n\t\t}\n\n\t\tthis.CubeUVRenderTarget = new WebGLRenderTarget( size, size, params );\n\t\tthis.CubeUVRenderTarget.texture.name = \"PMREMCubeUVPacker.cubeUv\";\n\t\tthis.CubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\n\t\tthis.objects = [];\n\n\t\tvar geometry = new PlaneBufferGeometry( 1, 1 );\n\n\t\tvar faceOffsets = [];\n\t\tfaceOffsets.push( new Vector2( 0, 0 ) );\n\t\tfaceOffsets.push( new Vector2( 1, 0 ) );\n\t\tfaceOffsets.push( new Vector2( 2, 0 ) );\n\t\tfaceOffsets.push( new Vector2( 0, 1 ) );\n\t\tfaceOffsets.push( new Vector2( 1, 1 ) );\n\t\tfaceOffsets.push( new Vector2( 2, 1 ) );\n\n\t\tvar textureResolution = size;\n\t\tsize = cubeTextureLods[ 0 ].width;\n\n\t\tvar offset2 = 0;\n\t\tvar c = 4.0;\n\t\tthis.numLods = Math.log( cubeTextureLods[ 0 ].width ) / Math.log( 2 ) - 2; // IE11 doesn't support Math.log2\n\t\tfor ( var i = 0; i < this.numLods; i ++ ) {\n\n\t\t\tvar offset1 = ( textureResolution - textureResolution / c ) * 0.5;\n\t\t\tif ( size > 16 ) c *= 2;\n\t\t\tvar nMips = size > 16 ? 6 : 1;\n\t\t\tvar mipOffsetX = 0;\n\t\t\tvar mipOffsetY = 0;\n\t\t\tvar mipSize = size;\n\n\t\t\tfor ( var j = 0; j < nMips; j ++ ) {\n\n\t\t\t\t// Mip Maps\n\t\t\t\tfor ( var k = 0; k < 6; k ++ ) {\n\n\t\t\t\t\t// 6 Cube Faces\n\t\t\t\t\tvar material = shader.clone();\n\t\t\t\t\tmaterial.uniforms[ 'envMap' ].value = this.cubeLods[ i ].texture;\n\t\t\t\t\tmaterial.envMap = this.cubeLods[ i ].texture;\n\t\t\t\t\tmaterial.uniforms[ 'faceIndex' ].value = k;\n\t\t\t\t\tmaterial.uniforms[ 'mapSize' ].value = mipSize;\n\n\t\t\t\t\tvar planeMesh = new Mesh( geometry, material );\n\t\t\t\t\tplaneMesh.position.x = faceOffsets[ k ].x * mipSize - offset1 + mipOffsetX;\n\t\t\t\t\tplaneMesh.position.y = faceOffsets[ k ].y * mipSize - offset1 + offset2 + mipOffsetY;\n\t\t\t\t\tplaneMesh.material.side = BackSide;\n\t\t\t\t\tplaneMesh.scale.setScalar( mipSize );\n\t\t\t\t\tthis.objects.push( planeMesh );\n\n\t\t\t\t}\n\t\t\t\tmipOffsetY += 1.75 * mipSize;\n\t\t\t\tmipOffsetX += 1.25 * mipSize;\n\t\t\t\tmipSize /= 2;\n\n\t\t\t}\n\t\t\toffset2 += 2 * size;\n\t\t\tif ( size > 16 ) size /= 2;\n\n\t\t}\n\n\t};\n\n\tPMREMCubeUVPacker.prototype = {\n\n\t\tconstructor: PMREMCubeUVPacker,\n\n\t\tupdate: function ( renderer ) {\n\n\t\t\tvar size = this.cubeLods[ 0 ].width * 4;\n\t\t\t// top and bottom are swapped for some reason?\n\t\t\tcamera.left = - size * 0.5;\n\t\t\tcamera.right = size * 0.5;\n\t\t\tcamera.top = - size * 0.5;\n\t\t\tcamera.bottom = size * 0.5;\n\t\t\tcamera.near = 0;\n\t\t\tcamera.far = 1;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t\tfor ( var i = 0; i < this.objects.length; i ++ ) {\n\n\t\t\t\tscene.add( this.objects[ i ] );\n\n\t\t\t}\n\n\t\t\tvar gammaInput = renderer.gammaInput;\n\t\t\tvar gammaOutput = renderer.gammaOutput;\n\t\t\tvar toneMapping = renderer.toneMapping;\n\t\t\tvar toneMappingExposure = renderer.toneMappingExposure;\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\trenderer.gammaInput = false;\n\t\t\trenderer.gammaOutput = false;\n\t\t\trenderer.toneMapping = LinearToneMapping;\n\t\t\trenderer.toneMappingExposure = 1.0;\n\t\t\trenderer.setRenderTarget( this.CubeUVRenderTarget );\n\t\t\trenderer.render( scene, camera );\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\t\t\trenderer.toneMapping = toneMapping;\n\t\t\trenderer.toneMappingExposure = toneMappingExposure;\n\t\t\trenderer.gammaInput = gammaInput;\n\t\t\trenderer.gammaOutput = gammaOutput;\n\n\t\t\tfor ( var i = 0; i < this.objects.length; i ++ ) {\n\n\t\t\t\tscene.remove( this.objects[ i ] );\n\n\t\t\t}\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tfor ( var i = 0, l = this.objects.length; i < l; i ++ ) {\n\n\t\t\t\tthis.objects[ i ].material.dispose();\n\n\t\t\t}\n\n\t\t\tthis.objects[ 0 ].geometry.dispose();\n\n\t\t}\n\n\t};\n\n\tfunction getShader() {\n\n\t\tvar shaderMaterial = new ShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t\"faceIndex\": { value: 0 },\n\t\t\t\t\"mapSize\": { value: 0 },\n\t\t\t\t\"envMap\": { value: null },\n\t\t\t\t\"testColor\": { value: new Vector3( 1, 1, 1 ) }\n\t\t\t},\n\n\t\t\tvertexShader:\n        \"precision highp float;\\\n        varying vec2 vUv;\\\n        void main() {\\\n          vUv = uv;\\\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\\n        }\",\n\n\t\t\tfragmentShader:\n        \"precision highp float;\\\n        varying vec2 vUv;\\\n        uniform samplerCube envMap;\\\n        uniform float mapSize;\\\n        uniform vec3 testColor;\\\n        uniform int faceIndex;\\\n        \\\n        void main() {\\\n          vec3 sampleDirection;\\\n          vec2 uv = vUv;\\\n          uv = uv * 2.0 - 1.0;\\\n          uv.y *= -1.0;\\\n          if(faceIndex == 0) {\\\n            sampleDirection = normalize(vec3(1.0, uv.y, -uv.x));\\\n          } else if(faceIndex == 1) {\\\n            sampleDirection = normalize(vec3(uv.x, 1.0, uv.y));\\\n          } else if(faceIndex == 2) {\\\n            sampleDirection = normalize(vec3(uv.x, uv.y, 1.0));\\\n          } else if(faceIndex == 3) {\\\n            sampleDirection = normalize(vec3(-1.0, uv.y, uv.x));\\\n          } else if(faceIndex == 4) {\\\n            sampleDirection = normalize(vec3(uv.x, -1.0, -uv.y));\\\n          } else {\\\n            sampleDirection = normalize(vec3(-uv.x, uv.y, -1.0));\\\n          }\\\n          vec4 color = envMapTexelToLinear( textureCube( envMap, sampleDirection ) );\\\n          gl_FragColor = linearToOutputTexel( color );\\\n        }\",\n\n\t\t\tblending: NoBlending\n\n\t\t} );\n\n\t\tshaderMaterial.type = 'PMREMCubeUVPacker';\n\n\t\treturn shaderMaterial;\n\n\t}\n\n\n\treturn PMREMCubeUVPacker;\n\n} )();\n\nexport { PMREMCubeUVPacker };\n","/**\n * @author Prashant Sharma / spidersharma03\n * @author Ben Houston / bhouston, https://clara.io\n *\n * To avoid cube map seams, I create an extra pixel around each face. This way when the cube map is\n * sampled by an application later(with a little care by sampling the centre of the texel), the extra 1 border\n *\tof pixels makes sure that there is no seams artifacts present. This works perfectly for cubeUV format as\n *\twell where the 6 faces can be arranged in any manner whatsoever.\n * Code in the beginning of fragment shader's main function does this job for a given resolution.\n *\tRun Scene_PMREM_Test.html in the examples directory to see the sampling from the cube lods generated\n *\tby this class.\n */\n\nimport {\n\tDoubleSide,\n\tGammaEncoding,\n\tLinearEncoding,\n\tLinearFilter,\n\tLinearToneMapping,\n\tMesh,\n\tNearestFilter,\n\tNoBlending,\n\tOrthographicCamera,\n\tPlaneBufferGeometry,\n\tScene,\n\tShaderMaterial,\n\tWebGLRenderTargetCube,\n\tsRGBEncoding\n} from \"three\";\n\nvar PMREMGenerator = ( function () {\n\n\tvar shader = getShader();\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0.0, 1000 );\n\tvar scene = new Scene();\n\tvar planeMesh = new Mesh( new PlaneBufferGeometry( 2, 2, 0 ), shader );\n\tplaneMesh.material.side = DoubleSide;\n\tscene.add( planeMesh );\n\tscene.add( camera );\n\n\tvar PMREMGenerator = function ( sourceTexture, samplesPerLevel, resolution ) {\n\n\t\tthis.sourceTexture = sourceTexture;\n\t\tthis.resolution = ( resolution !== undefined ) ? resolution : 256; // NODE: 256 is currently hard coded in the glsl code for performance reasons\n\t\tthis.samplesPerLevel = ( samplesPerLevel !== undefined ) ? samplesPerLevel : 32;\n\n\t\tvar monotonicEncoding = ( this.sourceTexture.encoding === LinearEncoding ) ||\n\t\t\t( this.sourceTexture.encoding === GammaEncoding ) || ( this.sourceTexture.encoding === sRGBEncoding );\n\n\t\tthis.sourceTexture.minFilter = ( monotonicEncoding ) ? LinearFilter : NearestFilter;\n\t\tthis.sourceTexture.magFilter = ( monotonicEncoding ) ? LinearFilter : NearestFilter;\n\t\tthis.sourceTexture.generateMipmaps = this.sourceTexture.generateMipmaps && monotonicEncoding;\n\n\t\tthis.cubeLods = [];\n\n\t\tvar size = this.resolution;\n\t\tvar params = {\n\t\t\tformat: this.sourceTexture.format,\n\t\t\tmagFilter: this.sourceTexture.magFilter,\n\t\t\tminFilter: this.sourceTexture.minFilter,\n\t\t\ttype: this.sourceTexture.type,\n\t\t\tgenerateMipmaps: this.sourceTexture.generateMipmaps,\n\t\t\tanisotropy: this.sourceTexture.anisotropy,\n\t\t\tencoding: this.sourceTexture.encoding\n\t\t};\n\n\t\t// how many LODs fit in the given CubeUV Texture.\n\t\tthis.numLods = Math.log( size ) / Math.log( 2 ) - 2; // IE11 doesn't support Math.log2\n\n\t\tfor ( var i = 0; i < this.numLods; i ++ ) {\n\n\t\t\tvar renderTarget = new WebGLRenderTargetCube( size, size, params );\n\t\t\trenderTarget.texture.name = \"PMREMGenerator.cube\" + i;\n\t\t\tthis.cubeLods.push( renderTarget );\n\t\t\tsize = Math.max( 16, size / 2 );\n\n\t\t}\n\n\t};\n\n\tPMREMGenerator.prototype = {\n\n\t\tconstructor: PMREMGenerator,\n\n\t\t/*\n\t\t * Prashant Sharma / spidersharma03: More thought and work is needed here.\n\t\t * Right now it's a kind of a hack to use the previously convolved map to convolve the current one.\n\t\t * I tried to use the original map to convolve all the lods, but for many textures(specially the high frequency)\n\t\t * even a high number of samples(1024) dosen't lead to satisfactory results.\n\t\t * By using the previous convolved maps, a lower number of samples are generally sufficient(right now 32, which\n\t\t * gives okay results unless we see the reflection very carefully, or zoom in too much), however the math\n\t\t * goes wrong as the distribution function tries to sample a larger area than what it should be. So I simply scaled\n\t\t * the roughness by 0.9(totally empirical) to try to visually match the original result.\n\t\t * The condition \"if(i <5)\" is also an attemt to make the result match the original result.\n\t\t * This method requires the most amount of thinking I guess. Here is a paper which we could try to implement in future::\n\t\t * https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch20.html\n\t\t */\n\t\tupdate: function ( renderer ) {\n\n\t\t\t// Texture should only be flipped for CubeTexture, not for\n\t\t\t// a Texture created via WebGLRenderTargetCube.\n\t\t\tvar tFlip = ( this.sourceTexture.isCubeTexture ) ? - 1 : 1;\n\n\t\t\tshader.defines[ 'SAMPLES_PER_LEVEL' ] = this.samplesPerLevel;\n\t\t\tshader.uniforms[ 'faceIndex' ].value = 0;\n\t\t\tshader.uniforms[ 'envMap' ].value = this.sourceTexture;\n\t\t\tshader.envMap = this.sourceTexture;\n\t\t\tshader.needsUpdate = true;\n\n\t\t\tvar gammaInput = renderer.gammaInput;\n\t\t\tvar gammaOutput = renderer.gammaOutput;\n\t\t\tvar toneMapping = renderer.toneMapping;\n\t\t\tvar toneMappingExposure = renderer.toneMappingExposure;\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\trenderer.toneMapping = LinearToneMapping;\n\t\t\trenderer.toneMappingExposure = 1.0;\n\t\t\trenderer.gammaInput = false;\n\t\t\trenderer.gammaOutput = false;\n\n\t\t\tfor ( var i = 0; i < this.numLods; i ++ ) {\n\n\t\t\t\tvar r = i / ( this.numLods - 1 );\n\t\t\t\tshader.uniforms[ 'roughness' ].value = r * 0.9; // see comment above, pragmatic choice\n\t\t\t\t// Only apply the tFlip for the first LOD\n\t\t\t\tshader.uniforms[ 'tFlip' ].value = ( i == 0 ) ? tFlip : 1;\n\t\t\t\tvar size = this.cubeLods[ i ].width;\n\t\t\t\tshader.uniforms[ 'mapSize' ].value = size;\n\t\t\t\tthis.renderToCubeMapTarget( renderer, this.cubeLods[ i ] );\n\n\t\t\t\tif ( i < 5 ) shader.uniforms[ 'envMap' ].value = this.cubeLods[ i ].texture;\n\n\t\t\t}\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\t\t\trenderer.toneMapping = toneMapping;\n\t\t\trenderer.toneMappingExposure = toneMappingExposure;\n\t\t\trenderer.gammaInput = gammaInput;\n\t\t\trenderer.gammaOutput = gammaOutput;\n\n\t\t},\n\n\t\trenderToCubeMapTarget: function ( renderer, renderTarget ) {\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tthis.renderToCubeMapTargetFace( renderer, renderTarget, i );\n\n\t\t\t}\n\n\t\t},\n\n\t\trenderToCubeMapTargetFace: function ( renderer, renderTarget, faceIndex ) {\n\n\t\t\tshader.uniforms[ 'faceIndex' ].value = faceIndex;\n\t\t\trenderer.setRenderTarget( renderTarget, faceIndex );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( scene, camera );\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tfor ( var i = 0, l = this.cubeLods.length; i < l; i ++ ) {\n\n\t\t\t\tthis.cubeLods[ i ].dispose();\n\n\t\t\t}\n\n\t\t},\n\n\t};\n\n\tfunction getShader() {\n\n\t\tvar shaderMaterial = new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t\"SAMPLES_PER_LEVEL\": 20,\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t\"faceIndex\": { value: 0 },\n\t\t\t\t\"roughness\": { value: 0.5 },\n\t\t\t\t\"mapSize\": { value: 0.5 },\n\t\t\t\t\"envMap\": { value: null },\n\t\t\t\t\"tFlip\": { value: - 1 },\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t\"varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}\",\n\n\t\t\tfragmentShader:\n\t\t\t\t\"#include <common>\\n\\\n\t\t\t\tvarying vec2 vUv;\\n\\\n\t\t\t\tuniform int faceIndex;\\n\\\n\t\t\t\tuniform float roughness;\\n\\\n\t\t\t\tuniform samplerCube envMap;\\n\\\n\t\t\t\tuniform float mapSize;\\n\\\n\t\t\t\tuniform float tFlip;\\n\\\n\t\t\t\t\\n\\\n\t\t\t\tfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\\n\t\t\t\t\tfloat a = ggxRoughness + 0.0001;\\n\\\n\t\t\t\t\ta *= a;\\n\\\n\t\t\t\t\treturn ( 2.0 / a - 2.0 );\\n\\\n\t\t\t\t}\\n\\\n\t\t\t\tvec3 ImportanceSamplePhong(vec2 uv, mat3 vecSpace, float specPow) {\\n\\\n\t\t\t\t\tfloat phi = uv.y * 2.0 * PI;\\n\\\n\t\t\t\t\tfloat cosTheta = pow(1.0 - uv.x, 1.0 / (specPow + 1.0));\\n\\\n\t\t\t\t\tfloat sinTheta = sqrt(1.0 - cosTheta * cosTheta);\\n\\\n\t\t\t\t\tvec3 sampleDir = vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);\\n\\\n\t\t\t\t\treturn vecSpace * sampleDir;\\n\\\n\t\t\t\t}\\n\\\n\t\t\t\tvec3 ImportanceSampleGGX( vec2 uv, mat3 vecSpace, float Roughness )\\n\\\n\t\t\t\t{\\n\\\n\t\t\t\t\tfloat a = Roughness * Roughness;\\n\\\n\t\t\t\t\tfloat Phi = 2.0 * PI * uv.x;\\n\\\n\t\t\t\t\tfloat CosTheta = sqrt( (1.0 - uv.y) / ( 1.0 + (a*a - 1.0) * uv.y ) );\\n\\\n\t\t\t\t\tfloat SinTheta = sqrt( 1.0 - CosTheta * CosTheta );\\n\\\n\t\t\t\t\treturn vecSpace * vec3(SinTheta * cos( Phi ), SinTheta * sin( Phi ), CosTheta);\\n\\\n\t\t\t\t}\\n\\\n\t\t\t\tmat3 matrixFromVector(vec3 n) {\\n\\\n\t\t\t\t\tfloat a = 1.0 / (1.0 + n.z);\\n\\\n\t\t\t\t\tfloat b = -n.x * n.y * a;\\n\\\n\t\t\t\t\tvec3 b1 = vec3(1.0 - n.x * n.x * a, b, -n.x);\\n\\\n\t\t\t\t\tvec3 b2 = vec3(b, 1.0 - n.y * n.y * a, -n.y);\\n\\\n\t\t\t\t\treturn mat3(b1, b2, n);\\n\\\n\t\t\t\t}\\n\\\n\t\t\t\t\\n\\\n\t\t\t\tvec4 testColorMap(float Roughness) {\\n\\\n\t\t\t\t\tvec4 color;\\n\\\n\t\t\t\t\tif(faceIndex == 0)\\n\\\n\t\t\t\t\t\tcolor = vec4(1.0,0.0,0.0,1.0);\\n\\\n\t\t\t\t\telse if(faceIndex == 1)\\n\\\n\t\t\t\t\t\tcolor = vec4(0.0,1.0,0.0,1.0);\\n\\\n\t\t\t\t\telse if(faceIndex == 2)\\n\\\n\t\t\t\t\t\tcolor = vec4(0.0,0.0,1.0,1.0);\\n\\\n\t\t\t\t\telse if(faceIndex == 3)\\n\\\n\t\t\t\t\t\tcolor = vec4(1.0,1.0,0.0,1.0);\\n\\\n\t\t\t\t\telse if(faceIndex == 4)\\n\\\n\t\t\t\t\t\tcolor = vec4(0.0,1.0,1.0,1.0);\\n\\\n\t\t\t\t\telse\\n\\\n\t\t\t\t\t\tcolor = vec4(1.0,0.0,1.0,1.0);\\n\\\n\t\t\t\t\tcolor *= ( 1.0 - Roughness );\\n\\\n\t\t\t\t\treturn color;\\n\\\n\t\t\t\t}\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvec3 sampleDirection;\\n\\\n\t\t\t\t\tvec2 uv = vUv*2.0 - 1.0;\\n\\\n\t\t\t\t\tfloat offset = -1.0/mapSize;\\n\\\n\t\t\t\t\tconst float a = -1.0;\\n\\\n\t\t\t\t\tconst float b = 1.0;\\n\\\n\t\t\t\t\tfloat c = -1.0 + offset;\\n\\\n\t\t\t\t\tfloat d = 1.0 - offset;\\n\\\n\t\t\t\t\tfloat bminusa = b - a;\\n\\\n\t\t\t\t\tuv.x = (uv.x - a)/bminusa * d - (uv.x - b)/bminusa * c;\\n\\\n\t\t\t\t\tuv.y = (uv.y - a)/bminusa * d - (uv.y - b)/bminusa * c;\\n\\\n\t\t\t\t\tif (faceIndex==0) {\\n\\\n\t\t\t\t\t\tsampleDirection = vec3(1.0, -uv.y, -uv.x);\\n\\\n\t\t\t\t\t} else if (faceIndex==1) {\\n\\\n\t\t\t\t\t\tsampleDirection = vec3(-1.0, -uv.y, uv.x);\\n\\\n\t\t\t\t\t} else if (faceIndex==2) {\\n\\\n\t\t\t\t\t\tsampleDirection = vec3(uv.x, 1.0, uv.y);\\n\\\n\t\t\t\t\t} else if (faceIndex==3) {\\n\\\n\t\t\t\t\t\tsampleDirection = vec3(uv.x, -1.0, -uv.y);\\n\\\n\t\t\t\t\t} else if (faceIndex==4) {\\n\\\n\t\t\t\t\t\tsampleDirection = vec3(uv.x, -uv.y, 1.0);\\n\\\n\t\t\t\t\t} else {\\n\\\n\t\t\t\t\t\tsampleDirection = vec3(-uv.x, -uv.y, -1.0);\\n\\\n\t\t\t\t\t}\\n\\\n\t\t\t\t\tvec3 correctedDirection = vec3( tFlip * sampleDirection.x, sampleDirection.yz );\\n\\\n\t\t\t\t\tmat3 vecSpace = matrixFromVector( normalize( correctedDirection ) );\\n\\\n\t\t\t\t\tvec3 rgbColor = vec3(0.0);\\n\\\n\t\t\t\t\tconst int NumSamples = SAMPLES_PER_LEVEL;\\n\\\n\t\t\t\t\tvec3 vect;\\n\\\n\t\t\t\t\tfloat weight = 0.0;\\n\\\n\t\t\t\t\tfor( int i = 0; i < NumSamples; i ++ ) {\\n\\\n\t\t\t\t\t\tfloat sini = sin(float(i));\\n\\\n\t\t\t\t\t\tfloat cosi = cos(float(i));\\n\\\n\t\t\t\t\t\tfloat r = rand(vec2(sini, cosi));\\n\\\n\t\t\t\t\t\tvect = ImportanceSampleGGX(vec2(float(i) / float(NumSamples), r), vecSpace, roughness);\\n\\\n\t\t\t\t\t\tfloat dotProd = dot(vect, normalize(sampleDirection));\\n\\\n\t\t\t\t\t\tweight += dotProd;\\n\\\n\t\t\t\t\t\tvec3 color = envMapTexelToLinear(textureCube(envMap, vect)).rgb;\\n\\\n\t\t\t\t\t\trgbColor.rgb += color;\\n\\\n\t\t\t\t\t}\\n\\\n\t\t\t\t\trgbColor /= float(NumSamples);\\n\\\n\t\t\t\t\t//rgbColor = testColorMap( roughness ).rgb;\\n\\\n\t\t\t\t\tgl_FragColor = linearToOutputTexel( vec4( rgbColor, 1.0 ) );\\n\\\n\t\t\t\t}\",\n\n\t\t\tblending: NoBlending\n\n\t\t} );\n\n\t\tshaderMaterial.type = 'PMREMGenerator';\n\n\t\treturn shaderMaterial;\n\n\t}\n\n\treturn PMREMGenerator;\n\n} )();\n\nexport { PMREMGenerator };\n","import React from 'react';\nimport ResizeObserver from \"resize-observer-polyfill\";\nimport './MainScene.scss';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\n\nimport { EquirectangularToCubeGenerator } from '../libs/EquirectangularToCubeGenerator';\nimport { PMREMCubeUVPacker } from '../libs/PMREMCubeUVPacker';\nimport { PMREMGenerator } from '../libs/PMREMGenerator';\n\nimport * as POSTPROCESSING from 'postprocessing';\n\n\nexport default class MainScene extends React.Component {\n\n\n\n  constructor(prop) {\n    super(prop);\n\n    this.width = 1024;\n    this.height = 512;\n    //Bind\n    this.loadEnvMap = this.loadEnvMap.bind(this);\n    this.loadModel = this.loadModel.bind(this);\n  }\n\n  /**\n   * Rendering\n   */\n  render() {\n    return (\n      <div className='mainScene' ref={(el) => { this.mainScene = el }}></div>\n    );\n  }\n\n  /**\n   * Initialization\n   */\n  componentDidMount() {\n\n    this.width = this.mainScene.clientWidth;\n    this.height = this.mainScene.clientHeight;\n\n    this.timer = 0;\n\n    this.clock = new THREE.Clock();\n\n    //Init scene\n    this.loadingManager = new THREE.LoadingManager();\n    this.loadingManager.onStart = function (url, itemsLoaded, itemsTotal) {\n      // console.log('Started loading file: ' + url + '.\\nLoaded ' + itemsLoaded + ' of ' + itemsTotal + ' files.');\n      //Show loading layer\n      document.getElementById(\"loading-container\").style.display = \"block\";\n    };\n\n    this.loadingManager.onLoad = function () {\n      console.log('Loading complete!');\n      //Hide loading Layer\n      document.getElementById(\"loading-container\").style.display = \"none\";\n    };\n\n\n    this.loadingManager.onProgress = function (url, itemsLoaded, itemsTotal) {\n\n      // console.log('Loading file: ' + url + '.\\nLoaded ' + itemsLoaded + ' of ' + itemsTotal + ' files.');\n\n    };\n\n    this.loadingManager.onError = function (url) {\n\n      // console.log('There was an error loading ' + url);\n\n    };\n\n    this.textureLoader = new THREE.TextureLoader(this.loadingManager);\n    this.cubeTextureLoader = new THREE.CubeTextureLoader(this.loadingManager);\n    this.gltfLoader = new GLTFLoader(this.loadingManager);\n    this.rgbeLoader = new RGBELoader(this.loadingManager);\n\n\n    /**\n     * Set environment\n     */\n\n    this.scene = new THREE.Scene();\n    this.scene.background = new THREE.Color(0xeeeeee);\n\n    this.camera = new THREE.PerspectiveCamera(50, this.width / this.height, 0.001, 1000);\n    this.camera.position.set(-0.5, 0.5, 0.5)\n\n    this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.autoClear = false;\n    this.renderer.gammaOutput = true;\n    this.renderer.gammaFactor = 3.2;\n    this.renderer.shadowMap.enabled = true;\n    this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\n    this.mainScene.appendChild(this.renderer.domElement);\n\n\n    this.cameraCtrl = new OrbitControls(this.camera, this.renderer.domElement);\n    this.cameraCtrl.enableDamping = true;\n    this.cameraCtrl.screenSpacePanning = true;\n    this.cameraCtrl.dampingFactor = 0.12;\n    this.cameraCtrl.minDistance = 0.1;\n    this.cameraCtrl.maxDistance = 10;\n    this.cameraCtrl.rotateSpeed = 0.5\n    this.cameraCtrl.panSpeed = 0.5;\n    // this.cameraCtrl.enablePan = false;\n    this.cameraCtrl.target = new THREE.Vector3(0, 0.1, 0);\n\n\n    this.resizeObserver = new ResizeObserver(entries => {\n      //Resize Canvas\n      const { width, height } = entries[0].contentRect;\n      this.width = width;\n      this.height = height;\n\n      if (this.composer)\n        this.composer.setSize(this.width, this.height);\n\n      this.camera.aspect = this.width / this.height;\n      this.camera.updateProjectionMatrix();\n    });\n\n    this.resizeObserver.observe(this.mainScene);\n\n    //Root object of product\n    this.rootObj = new THREE.Object3D();\n    this.scene.add(this.rootObj);\n\n\n    //Lights\n    var envLight = new THREE.AmbientLight(0xc4976c, 2.5);\n    this.scene.add(envLight);\n\n    var dirLight = new THREE.DirectionalLight(0xffffff, 1);\n    dirLight.position.set(4, 3, 10);\n    dirLight.castShadow = true;\n    dirLight.shadow.camera.top = 10;\n    dirLight.shadow.camera.bottom = - 10;\n    dirLight.shadow.camera.left = - 10;\n    dirLight.shadow.camera.right = 10;\n    dirLight.shadow.camera.near = 0.1;\n    dirLight.shadow.camera.far = 40;\n    dirLight.shadow.mapSize.width = 2048;\n    dirLight.shadow.mapSize.height = 2048;\n    this.scene.add(dirLight);\n\n    var dirLight1 = new THREE.DirectionalLight(0xffffff, 1);\n    dirLight1.position.set(-4, 3, -10);\n    dirLight1.castShadow = true;\n    dirLight1.shadow.camera.top = 10;\n    dirLight1.shadow.camera.bottom = - 10;\n    dirLight1.shadow.camera.left = - 10;\n    dirLight1.shadow.camera.right = 10;\n    dirLight1.shadow.camera.near = 0.1;\n    dirLight1.shadow.camera.far = 40;\n    dirLight1.shadow.mapSize.width = 2048;\n    dirLight1.shadow.mapSize.height = 2048;\n    this.scene.add(dirLight1);\n\n    //Load envMap\n    this.rgbeLoader\n      .setDataType(THREE.UnsignedByteType)\n      .setPath('assets/textures/env/')\n      .load('industry_interior_2.hdr', this.loadEnvMap);\n\n\n    window.mainScene = this;\n  }\n\n  loadEnvMap(texture) {\n    var cubeGenerator = new EquirectangularToCubeGenerator(texture, { resolution: 2048 });\n    cubeGenerator.update(this.renderer);\n    var pmremGenerator = new PMREMGenerator(cubeGenerator.renderTarget.texture);\n    pmremGenerator.update(this.renderer);\n    var pmremCubeUVPacker = new PMREMCubeUVPacker(pmremGenerator.cubeLods);\n    pmremCubeUVPacker.update(this.renderer);\n    this.envMap = pmremCubeUVPacker.CubeUVRenderTarget.texture;\n    pmremGenerator.dispose();\n    pmremCubeUVPacker.dispose();\n    // this.scene.background = cubeGenerator.renderTarget;\n\n    this.startScene();\n  }\n\n  startScene() {\n    //Load default model\n    this.loadGLTF(\"assets/models/akm/scene.gltf\");\n\n    this.initPostprocessing();\n    this.animate();\n  }\n\n  loadGLTF(url) {\n    this.gltfLoader.load(url, this.loadModel);\n  }\n\n  loadModel(model) {\n    this.gun = model.scene.children[0];\n    this.gun.scale.set(0.1, 0.1, 0.1);\n\n    //Replace model\n    this.scene.remove(this.rootObj);\n    this.rootObj = new THREE.Object3D();\n    this.scene.add(this.rootObj);\n    this.rootObj.add(this.gun);\n\n    let self = this;\n    this.scene.traverse(function (child) {\n      if (child.isMesh) {\n        child.material.envMap = self.envMap;\n        child.material.envMapIntensity = 3;\n      }\n    })\n\n    this.fitCameraToObject(this.gun, 3);\n  }\n\n  /**\n   * Remove all objects from scene\n   */\n\n\n  fitCameraToObject(object, offset) {\n\n    offset = offset || 1.25;\n\n    const boundingBox = new THREE.Box3();\n\n    // get bounding box of object - this will be used to setup controls and camera\n    boundingBox.setFromObject(object);\n\n    const center = new THREE.Vector3();\n\n    boundingBox.getCenter(center);\n\n    const size = new THREE.Vector3();\n    boundingBox.getSize(size);\n\n    // get the max side of the bounding box (fits to width OR height as needed )\n    const maxDim = Math.max(size.x, size.y, size.z);\n\n    const fov = this.camera.fov * (Math.PI / 180);\n\n    var cameraZ = Math.abs(maxDim / 4);\n\n    cameraZ *= offset; // zoom out a little so that objects don't fill the screen\n\n    this.camera.position.z = cameraZ;\n\n    const minZ = boundingBox.min.z;\n    const cameraToFarEdge = (minZ < 0) ? -minZ + cameraZ : cameraZ - minZ;\n\n    this.camera.far = cameraToFarEdge * 3;\n    this.camera.updateProjectionMatrix();\n\n    if (this.cameraCtrl) {\n\n      // set camera to rotate around center of loaded object\n      this.cameraCtrl.target = center;\n\n      // prevent camera from zooming out far enough to create far plane cutoff\n      this.cameraCtrl.maxDistance = cameraToFarEdge * 2;\n\n      this.cameraCtrl.saveState();\n\n    } else {\n\n      this.camera.lookAt(center)\n\n    }\n  }\n\n  initPostprocessing() {\n\n    this.composer = new POSTPROCESSING.EffectComposer(this.renderer);\n\n    //Render pass\n    const renderPass = new POSTPROCESSING.RenderPass(this.scene, this.camera)\n    this.composer.addPass(renderPass);\n\n\n    // Effect pass\n    const vignetteEffect = new POSTPROCESSING.VignetteEffect({\n      eskil: false,\n      offset: 0.18,\n      darkness: 0.7\n    });\n\n    const brightnessContrastEffect = new POSTPROCESSING.BrightnessContrastEffect({ contrast: 0.01, brightness: 0.01 });\n    const gammaCorrectionEffect = new POSTPROCESSING.GammaCorrectionEffect({ gamma: 1.8 });\n\n    const areaImage = new Image();\n    areaImage.src = POSTPROCESSING.SMAAEffect.areaImageDataURL;\n\n\n    const searchImage = new Image();\n    searchImage.src = POSTPROCESSING.SMAAEffect.searchImageDataURL;\n\n\n    const smaaEffect = new POSTPROCESSING.SMAAEffect(searchImage, areaImage);\n\n    const bloomEffect = new POSTPROCESSING.BloomEffect({\n      intensity: 0.2,\n      luminanceThreshold: 0.3,\n      luminanceSmoothing: 0.83,\n      resolutionScale: 0.5,\n    });\n\n\n    const hueSaturationEffect = new POSTPROCESSING.HueSaturationEffect({ hue: 0.0, saturation: -0.391 });\n\n    const effectPass = new POSTPROCESSING.EffectPass(\n      this.camera,\n      bloomEffect,\n      smaaEffect,\n      vignetteEffect,\n      brightnessContrastEffect,\n      gammaCorrectionEffect,\n      hueSaturationEffect,\n    );\n\n    effectPass.renderToScreen = true;\n\n    this.composer.addPass(effectPass);\n\n  }\n\n  updatePostprocessing = function () {\n    this.composer.render();\n  }\n\n  /**\n   * Animation loop\n   */\n\n  animate() {\n    requestAnimationFrame(this.animate.bind(this));\n\n    this.timer += this.clock.getDelta();\n\n    this.cameraCtrl.update();\n\n    this.updatePostprocessing();\n  }\n\n  /**\n   * Invalidation handler\n   */\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n\n  }\n\n  /**\n   * Dispose\n   */\n  componentWillUnmount() {\n    this.resizeObserver.disconnect();\n  }\n\n}\n","import React from 'react';\nimport PageLayout from '../layouts/PageLayout';\nimport MainScene from '../components/MainScene';\nimport './Home.scss';\n\nconst Home = () => (\n  <PageLayout>\n    <MainScene ></MainScene>\n  </PageLayout>\n);\n\nexport default Home;","import React from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\nimport Home from './containers/Home';\n\nconst Main = () => (\n  <BrowserRouter basename=\"/main\">\n    <Switch>\n      <Route exact path='/' component={Home}></Route>\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Main;","import React from 'react';\nimport Main from './Main';\nimport './App.scss';\n\nconst App = () => (\n  <Main />\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('container3D'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}